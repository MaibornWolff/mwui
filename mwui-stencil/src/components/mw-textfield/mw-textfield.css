:host {
  display: flex;
  align-items: center;
}

.wrapper {
  display: inline-flex;
  flex-direction: column;
}

.textfield {
  display: flex;
  flex-direction: column;
  min-width: var(--mw-component-size-text-field-min-width);
  color: var(--mw-component-text-field-fg-default);
}

.textfield.disabled,
.textfield.disabled input {
  color: var(--mw-component-text-field-fg-disabled);
}

label {
  padding: 0 var(--mw-component-text-field-padding-text-field-label-vertical-x);
  font-family: var(--mw-component-text-field-label-font-family);
  font-weight: var(--mw-component-text-field-label-font-weight);
  font-size: var(--mw-component-text-field-label-font-size);
  line-height: var(--mw-component-text-field-label-line-height);
}

.textfield.inline {
  flex-direction: row;
  display: inline-flex;
  align-items: center;
}

.textfield.inline .input {
  width: max-content;
  min-width: var(--mw-component-size-text-field-min-width);
}

.textfield.inline label {
  width: var(--mw-component-size-text-field-label-horizontal-width);
  padding: var(--mw-component-text-field-padding-text-field-label-horizontal);
}

.textfield.read-only,
.textfield.read-only .input input {
  cursor: pointer;
}

.input {
  display: flex;
  align-items: center;
  /* TODO: missing token */
  border-radius: var(--border-radius-standard-md);
  padding: var(--mw-component-text-field-padding-text-field-y) var(--mw-component-text-field-padding-text-field-x);
  background: var(--mw-component-text-field-bg-default);
  box-shadow: inset 0 0 0 var(--mw-component-text-field-default) var(--mw-component-text-field-border-default);
}

.input:focus-within {
  background: var(--mw-component-text-field-bg-default);
  box-shadow: inset 0 0 0 var(--mw-component-text-field-focused) var(--mw-component-text-field-border-focused);
}

.input:not(.disabled):hover {
  background: var(--mw-component-text-field-bg-hover);
}

.input.has-error {
  background: var(--mw-component-text-field-bg-error);
}

.input .icon {
  color: var(--mw-component-text-field-fg-icon-default);
}
.input-options {
  display: flex;
  flex-flow: row wrap;
  gap: var(--mw-component-text-field-gap-horizontal-gap-within);
}
.input input {
  min-width: 150px;
  width: 100%;
  flex: 1;
}
.focused {
  color: var(--mw-component-text-field-fg-icon-focused);
}

.focused.has-error {
  color: var(--mw-component-text-field-fg-error);
}

.icon-start {
  margin-right: var(--mw-component-text-field-gap-horizontal-gap-within);
}

.icon-end {
  margin-left: var(--mw-component-text-field-gap-horizontal-gap-within);
}

.input inputÂ  {
  border: none;
  padding: 0;
  width: 100%;
  background: transparent;
  font-family: var(--mw-component-text-field-text-font-family);
  font-weight: var(--mw-component-text-field-text-font-weight);
  font-size: var(--mw-component-text-field-text-font-size);
  line-height: var(--mw-component-text-field-text-line-height);
}

.input input:focus-visible,
.input input:focus {
  outline: none;
  border: none;
  box-shadow: none;
}

.input input::placeholder {
  color: var(--mw-component-text-field-fg-placeholder);
}

.helper-text {
  align-self: flex-end;
  padding: var(--mw-component-text-field-padding-helper-text-y) 0;
  color: var(--mw-component-text-field-fg-helper-text);
  font-family: var(--mw-component-text-field-helper-text-font-family);
  font-weight: var(--mw-component-text-field-helper-text-font-weight);
  font-size: var(--mw-component-text-field-helper-text-font-size);
  line-height: var(--mw-component-text-field-helper-text-line-height);
}

.has-error {
  color: var(--mw-component-text-field-fg-error);
}

.required {
  color: var(--mw-component-text-field-fg-error);
}
