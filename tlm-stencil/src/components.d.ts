/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Size } from "./components/mw-avatar/mw-avatar";
import { Target } from "./components/mw-button/mw-button";
import { Size as Size1 } from "./components/mw-avatar/mw-avatar";
export namespace Components {
    interface MwAvatar {
        /**
          * Alt text, first letter used as fallback when no src or icon given
         */
        "alt"?: string;
        /**
          * Size variant
         */
        "size"?: Size;
        /**
          * Image source
         */
        "src"?: string;
        /**
          * Test Id
         */
        "testId"?: string;
    }
    interface MwButton {
        /**
          * Visually and functionally disable button
         */
        "disabled"?: boolean;
        /**
          * If provided the button will act as a link
         */
        "href"?: string;
        /**
          * Label to be displayed
         */
        "label"?: string;
        /**
          * Use secondary button style
         */
        "secondary"?: boolean;
        /**
          * If using href the target prop can be provided
         */
        "target"?: Target;
        /**
          * Must be provided for automated testing
         */
        "testId": string;
    }
    interface MwIcon {
        /**
          * Overwrite default color
         */
        "color"?: string;
        /**
          * The icon name to be rendered
         */
        "icon": string;
        /**
          * Size variant
         */
        "size": Size1;
    }
    interface MwSwitch {
        /**
          * Switch state
         */
        "checked": boolean;
        /**
          * Visually and functionally disable switch
         */
        "disabled"?: boolean;
        /**
          * Fixed label to be displayed next to the toggle switch
         */
        "label"?: string;
        /**
          * Label to be shown when switch state is unchecked. Overrides label prop
         */
        "offText"?: string;
        /**
          * Label to be shown when switch state is checked. Overrides label prop
         */
        "onText"?: string;
    }
}
export interface MwButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMwButtonElement;
}
declare global {
    interface HTMLMwAvatarElement extends Components.MwAvatar, HTMLStencilElement {
    }
    var HTMLMwAvatarElement: {
        prototype: HTMLMwAvatarElement;
        new (): HTMLMwAvatarElement;
    };
    interface HTMLMwButtonElement extends Components.MwButton, HTMLStencilElement {
    }
    var HTMLMwButtonElement: {
        prototype: HTMLMwButtonElement;
        new (): HTMLMwButtonElement;
    };
    interface HTMLMwIconElement extends Components.MwIcon, HTMLStencilElement {
    }
    var HTMLMwIconElement: {
        prototype: HTMLMwIconElement;
        new (): HTMLMwIconElement;
    };
    interface HTMLMwSwitchElement extends Components.MwSwitch, HTMLStencilElement {
    }
    var HTMLMwSwitchElement: {
        prototype: HTMLMwSwitchElement;
        new (): HTMLMwSwitchElement;
    };
    interface HTMLElementTagNameMap {
        "mw-avatar": HTMLMwAvatarElement;
        "mw-button": HTMLMwButtonElement;
        "mw-icon": HTMLMwIconElement;
        "mw-switch": HTMLMwSwitchElement;
    }
}
declare namespace LocalJSX {
    interface MwAvatar {
        /**
          * Alt text, first letter used as fallback when no src or icon given
         */
        "alt"?: string;
        /**
          * Size variant
         */
        "size"?: Size;
        /**
          * Image source
         */
        "src"?: string;
        /**
          * Test Id
         */
        "testId"?: string;
    }
    interface MwButton {
        /**
          * Visually and functionally disable button
         */
        "disabled"?: boolean;
        /**
          * If provided the button will act as a link
         */
        "href"?: string;
        /**
          * Label to be displayed
         */
        "label"?: string;
        "onClickEmitter"?: (event: MwButtonCustomEvent<string>) => void;
        /**
          * Use secondary button style
         */
        "secondary"?: boolean;
        /**
          * If using href the target prop can be provided
         */
        "target"?: Target;
        /**
          * Must be provided for automated testing
         */
        "testId": string;
    }
    interface MwIcon {
        /**
          * Overwrite default color
         */
        "color"?: string;
        /**
          * The icon name to be rendered
         */
        "icon"?: string;
        /**
          * Size variant
         */
        "size"?: Size1;
    }
    interface MwSwitch {
        /**
          * Switch state
         */
        "checked"?: boolean;
        /**
          * Visually and functionally disable switch
         */
        "disabled"?: boolean;
        /**
          * Fixed label to be displayed next to the toggle switch
         */
        "label"?: string;
        /**
          * Label to be shown when switch state is unchecked. Overrides label prop
         */
        "offText"?: string;
        /**
          * Label to be shown when switch state is checked. Overrides label prop
         */
        "onText"?: string;
    }
    interface IntrinsicElements {
        "mw-avatar": MwAvatar;
        "mw-button": MwButton;
        "mw-icon": MwIcon;
        "mw-switch": MwSwitch;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "mw-avatar": LocalJSX.MwAvatar & JSXBase.HTMLAttributes<HTMLMwAvatarElement>;
            "mw-button": LocalJSX.MwButton & JSXBase.HTMLAttributes<HTMLMwButtonElement>;
            "mw-icon": LocalJSX.MwIcon & JSXBase.HTMLAttributes<HTMLMwIconElement>;
            "mw-switch": LocalJSX.MwSwitch & JSXBase.HTMLAttributes<HTMLMwSwitchElement>;
        }
    }
}
